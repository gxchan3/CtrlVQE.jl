export EvolutionType
export evolve, evolve!, workbasis, gradientsignals

import ..LinearAlgebraTools
import ..Integrations, ..Devices
import ..Bases

import ..Bases: OCCUPATION
import ..Operators: STATIC, UNCOUPLED, Drive, LocalandNonlocalDrive, Gradient

import ..TrapezoidalIntegrations: TrapezoidalIntegration

import ..TempArrays: array
const LABEL = Symbol(@__MODULE__)

using LinearAlgebra: norm
using Memoization: @memoize

"""
    EvolutionType

Super-type for all evolution algorithms.

# Implementation

Any concrete sub-type `A` must implement the following methods:
- `workbasis(::A)`: which Bases.BasisType the evolution algorithm uses
- `evolve!(::A, device, grid, œà; callback=nothing)`: evolve œà (in-place) on a time grid
                                    (you may assume the basis of œà is the work basis)

You are allowed to implement `evolve!` for restricted types of `grid`
    (eg. require it to be a `TrapezoidalIntegration`),
    so long as you are clear in your documentation.

"""
abstract type EvolutionType end

"""
    workbasis(evolution::EvolutionType)

Which basis the evolution algorithm works in.

Also defines the default basis to interpret œà as, in evolution methods.

"""
function workbasis(::EvolutionType)
    error("Not Implemented")
    return OCCUPATION
end

"""
    evolve!(evolution, device, [basis, ]T, œà; basis=nothing, callback=nothing)

Evolve a state `œà` by time `T` under a `device` Hamiltonian.

This method both mutates and returns `œà`.

# Arguments
- `evolution::EvolutionType`: which evolution algorithm to use.
- `device::Devices.DeviceType`: specifies which Hamiltonian to evolve under.
- `basis::Bases.BasisType`: which basis `œà` is represented in.
        Implicitly defaults to `workbasis(evolution)`.
- `grid::TrapezoidalIntegration`: defines the time integration bounds (eg. from 0 to `T`)
- `œà`: the initial statevector, defined on the full Hilbert space of the device.

# Keyword Arguments
- `callback`: a function which is called at each iteration of the time evolution.
        The function is passed three arguments:
        - `i`: indexes the iteration
        - `t`: the current time point
        - `œà`: the current statevector, in the work basis
        The function is called after having evolved œà into |œà(t)‚ü©.

"""
function evolve! end

function evolve!(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    grid::Integrations.IntegrationType,
    œà0::AbstractVector;
    callback=nothing,
)
    error("Not Implemented")
    return œà0
end

function evolve!(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    basis::Bases.BasisType,
    grid::Integrations.IntegrationType,
    œà0::AbstractVector;
    kwargs...
)
    basis==workbasis(evolution) && return evolve!(evolution, device, grid, œà0; kwargs...)

    U = Devices.basisrotation(workbasis(evolution), basis, device)
    œà0 = LinearAlgebraTools.rotate!(U, œà0)      # ROTATE INTO WORK BASIS
    œà0 = evolve!(evolution, device, grid, œà0; kwargs...)
    œà0 = LinearAlgebraTools.rotate!(U', œà0)     # ROTATE BACK INTO GIVEN BASIS
    return œà0
end

"""
    evolve(evolution, device, [basis, ]grid, œà0; result=nothing, kwargs...)

Evolve a state `œà0` over time `grid` under a `device` Hamiltonian, without mutating `œà0`.

This method simply copies `œà0` (to `result` if provided, or else to a new array),
    then calls the mutating function `evolve!` on the copy.
Please see `evolve!` for detailed documentation.

"""
function evolve end

function evolve(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    grid::Integrations.IntegrationType,
    œà0::AbstractVector;
    result=nothing,
    kwargs...
)
    F = LinearAlgebraTools.cis_type(œà0)
    result === nothing && (result = Vector{F}(undef, length(œà0)))
    result .= œà0
    return evolve!(evolution, device, grid, result; kwargs...)
end

function evolve(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    basis::Bases.BasisType,
    grid::Integrations.IntegrationType,
    œà0::AbstractVector;
    result=nothing,
    kwargs...
)
    F = LinearAlgebraTools.cis_type(œà0)
    result === nothing && (result = Vector{F}(undef, length(œà0)))
    result .= œà0
    return evolve!(evolution, device, basis, grid, result; kwargs...)
end



"""
    gradientsignals(device[, basis], grid, œà0, r, O; kwargs...)

The gradient signals associated with a given `device` Hamiltonian, and an observable `O`.

Gradient signals are used to calculate analytical derivatives of a control pulse.

NOTE: Currently, this method assumes a trapezoidal rule,
    so only `TrapezoidalIntegration` grids are allowed.

# Arguments
- `evolution::EvolutionType` how to initialize the co-state `|Œª‚ü©`
        A standard choice would be `ToggleEvolutions.Toggle(r)`.

- `device::Devices.DeviceType`: specifies which Hamiltonian to evolve under.
        Also identifies each of the gradient operators used to calculate gradient signals.

- `basis::Bases.BasisType`: which basis `œà` is represented in.
        ALSO determines the basis in which calculations are carried out.
        Defaults to `Bases.OCCUPATION`.

- `grid::TrapezoidalIntegration`: defines the time integration bounds (eg. from 0 to `T`)

- `œà0`: the initial statevector, defined on the full Hilbert space of the device.

- `O`: a Hermitian observable, represented as a matrix.
    Gradients are calculated with respect to the expectation `‚ü®O‚ü©` at time `T`.

# Keyword Arguments
- `result`: an (optional) pre-allocated array to store gradient signals

- `callback`: a function called at each iteration of the gradient signal calculation.
        The function is passed three arguments:
        - `i`: indexes the iteration
        - `t`: the current time point
        - `œà`: the current statevector, in the OCCUPATION basis
        The function is called after having evolved œà into |œà(t)‚ü©,
            but before calculating œïÃÑ[i,:]. Evolution here runs backwards.

# Returns
A vector list `œïÃÑ`, where each `œïÃÑ[:,j]` is the gradient signal ``œï_j(t)``
    evaluated on the given time grid.


# Explanation
A gradient signal ``œï_j(t)`` is defined with respect to a gradient operator ``AÃÇ_j``,
    an observable ``OÃÇ``, a time-dependent state `|œà(t)‚ü©`, and total pulse duration `T`.

Let us define the expectation value ``E(T) ‚â° ‚ü®œà(T)|OÃÇ|œà(T)‚ü©``.

Define the co-state ``|Œª(t)‚ü©`` as the (un-normalized) statevector
    which satisfies ``E(T)=‚ü®Œª(t)|œà(t)‚ü©`` for any time `t‚àä[0,T]`.
The gradient signal is defined as ``œï_j(t) ‚â° ‚ü®Œª(t)|(iAÃÇ_j)|œà(t)‚ü© + h.t.``.


    gradientsignals(device[, basis], T, œà0, r, OÃÑ; kwargs...)

When the matrix argument `O` is replaced by a matrix list `OÃÑ`,
    each `OÃÑ[:,:,k]` represents a different Hermitian observable ``OÃÇ_k``.
In this case, a different set of gradient signals is computed for *each* ``OÃÇ_k``.

# Returns
A 3d array `œïÃÑ`, where each `œïÃÑ[:,j,k]` is the gradient signal ``œï_j(t)``
    defined with respect to the observable ``OÃÇ_k``.

# Explanation
Multiple sets of gradient signals may be useful
    if you want to compute gradients with respect to multiple observables.
For example, gradients with respect to a normalized molecular energy
    include contributions from both a molecular Hamiltonian and a leakage operator.
This method enables such calculations using only a single "pass" through time.

"""
function gradientsignals(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    args...;
    kwargs...
)
    return gradientsignals(evolution, device, workbasis(evolution), args...; kwargs...)
end

function gradientsignals(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    basis::Bases.BasisType,
    grid::TrapezoidalIntegration,
    œà0::AbstractVector,
    O::AbstractMatrix;
    result=nothing,
    kwargs...
)
    # `O` AND `result` GIVEN AS 2D ARRAYS BUT MUST BE 3D FOR DELEGATION
    result !== nothing && (result = reshape(result, size(result)..., 1))
    OÃÑ = reshape(O, size(O)..., 1)

    # PERFORM THE DELEGATION
    result = gradientsignals(
        evolution, device, basis, grid, œà0, OÃÑ;
        result=result, kwargs...
    )

    # NOW RESHAPE `result` BACK TO 2D ARRAY
    result = reshape(result, size(result, 1), size(result, 2))
    return result
end

function gradientsignals(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    basis::Bases.BasisType,
    grid::TrapezoidalIntegration,
    œà0::AbstractVector,
    OÃÑ::LinearAlgebraTools.MatrixList;
    result=nothing,
    callback=nothing,
)
    # PREPARE TEMPORAL LATTICE
    r = Integrations.nsteps(grid)
    œÑ = Integrations.stepsize(grid)
    tÃÑ = Integrations.lattice(grid)

    # PREPARE SIGNAL ARRAYS œïÃÑ[i,j,k]
    if result === nothing
        F = real(LinearAlgebraTools.cis_type(œà0))
        result = Array{F}(undef, r+1, Devices.ngrades(device), size(OÃÑ,3))
    end

    # PREPARE STATE AND CO-STATES
    œàTYPE = LinearAlgebraTools.cis_type(œà0)
    œà = array(œàTYPE, size(œà0), LABEL); œà .= œà0
    œà = evolve!(evolution, device, basis, grid, œà)

    ŒªÃÑ = array(œàTYPE, (size(œà0,1), size(OÃÑ,3)), LABEL)
    for k in axes(OÃÑ,3)
        ŒªÃÑ[:,k] .= œà
        LinearAlgebraTools.rotate!(@view(OÃÑ[:,:,k]), @view(ŒªÃÑ[:,k]))
    end

    # ROTATE INTO OCCUPATION BASIS FOR THE REST OF THIS METHOD
    if basis != OCCUPATION
        U = Devices.basisrotation(OCCUPATION, basis, device)
        œà = LinearAlgebraTools.rotate!(U, œà)
        for k in axes(OÃÑ,3)
            LinearAlgebraTools.rotate!(U, @view(ŒªÃÑ[:,k]))
        end
    end

    # LAST GRADIENT SIGNALS
    callback !== nothing && callback(r+1, tÃÑ[r+1], œà)
    for k in axes(OÃÑ,3)
        Œª = @view(ŒªÃÑ[:,k])
        for j in 1:Devices.ngrades(device)
            z = Devices.braket(Gradient(j, tÃÑ[end]), device, OCCUPATION, Œª, œà)
            result[r+1,j,k] = 2 * imag(z)   # œïÃÑ[i,j,k] = -ùëñz + ùëñzÃÑ
        end
    end

    # ITERATE OVER TIME
    for i in reverse(1:r)
        # COMPLETE THE PREVIOUS TIME-STEP AND START THE NEXT
        œà = Devices.propagate!(Drive(tÃÑ[i+1]), device, OCCUPATION, -œÑ/2, œà)
        œà = Devices.propagate!(STATIC, device, OCCUPATION, -œÑ, œà)
        œà = Devices.propagate!(Drive(tÃÑ[i]),   device, OCCUPATION, -œÑ/2, œà)
        for k in axes(OÃÑ,3)
            Œª = @view(ŒªÃÑ[:,k])
            Devices.propagate!(Drive(tÃÑ[i+1]), device, OCCUPATION, -œÑ/2, Œª)
            Devices.propagate!(STATIC, device, OCCUPATION, -œÑ, Œª)
            Devices.propagate!(Drive(tÃÑ[i]),   device, OCCUPATION, -œÑ/2, Œª)
        end

        # CALCULATE GRADIENT SIGNAL BRAKETS
        callback !== nothing && callback(i, tÃÑ[i], œà)
        for k in axes(OÃÑ,3)
            Œª = @view(ŒªÃÑ[:,k])
            for j in 1:Devices.ngrades(device)
                z = Devices.braket(Gradient(j, tÃÑ[i]), device, OCCUPATION, Œª, œà)
                result[i,j,k] = 2 * imag(z) # œïÃÑ[i,j,k] = -ùëñz + ùëñzÃÑ
            end
        end
    end

    return result
end

"""
Essentially the same as the function `gradientsignals` above with the addition of tunable interqubit coupling
    the gradientsignal array include the gradient signal of interqubit coupler
"""
function tunablecouplergradientsignals(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    args...;
    kwargs...
)
    return tunablecouplergradientsignals(evolution, device, workbasis(evolution), args...; kwargs...)
end

function tunablecouplergradientsignals(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    basis::Bases.BasisType,
    grid::TrapezoidalIntegration,
    œà0::AbstractVector,
    O::AbstractMatrix;
    result=nothing,
    kwargs...
)
    # `O` AND `result` GIVEN AS 2D ARRAYS BUT MUST BE 3D FOR DELEGATION
    result !== nothing && (result = reshape(result, size(result)..., 1))
    OÃÑ = reshape(O, size(O)..., 1)

    # PERFORM THE DELEGATION
    result = tunablecouplergradientsignals(
        evolution, device, basis, grid, œà0, OÃÑ;
        result=result, kwargs...
    )

    # NOW RESHAPE `result` BACK TO 2D ARRAY
    result = reshape(result, size(result, 1), size(result, 2))
    return result
end

function tunablecouplergradientsignals(
    evolution::EvolutionType,
    device::Devices.DeviceType,
    basis::Bases.BasisType,
    grid::TrapezoidalIntegration,
    œà0::AbstractVector,
    OÃÑ::LinearAlgebraTools.MatrixList;
    result=nothing,
    callback=nothing,
)
    # PREPARE TEMPORAL LATTICE
    r = Integrations.nsteps(grid)
    œÑ = Integrations.stepsize(grid)
    tÃÑ = Integrations.lattice(grid)

    # PREPARE SIGNAL ARRAYS œïÃÑ[i,j,k]
    if result === nothing
        F = real(LinearAlgebraTools.cis_type(œà0))
        result = Array{F}(undef, r+1, Devices.ngrades(device), size(OÃÑ,3))
    end

    # PREPARE STATE AND CO-STATES
    œàTYPE = LinearAlgebraTools.cis_type(œà0)
    œà = array(œàTYPE, size(œà0), LABEL); œà .= œà0
    œà = evolve!(evolution, device, basis, grid, œà)

    ŒªÃÑ = array(œàTYPE, (size(œà0,1), size(OÃÑ,3)), LABEL)
    for k in axes(OÃÑ,3)
        ŒªÃÑ[:,k] .= œà
        LinearAlgebraTools.rotate!(@view(OÃÑ[:,:,k]), @view(ŒªÃÑ[:,k]))
    end

    # ROTATE INTO OCCUPATION BASIS FOR THE REST OF THIS METHOD
    if basis != OCCUPATION
        U = Devices.basisrotation(OCCUPATION, basis, device)
        œà = LinearAlgebraTools.rotate!(U, œà)
        for k in axes(OÃÑ,3)
            LinearAlgebraTools.rotate!(U, @view(ŒªÃÑ[:,k]))
        end
    end

    # LAST GRADIENT SIGNALS
    callback !== nothing && callback(r+1, tÃÑ[r+1], œà)
    for k in axes(OÃÑ,3)
        Œª = @view(ŒªÃÑ[:,k])
        for j in 1:Devices.ngrades(device)
            z = Devices.braket(Gradient(j, tÃÑ[end]), device, OCCUPATION, Œª, œà)
            result[r+1,j,k] = 2 * imag(z)   # œïÃÑ[i,j,k] = -ùëñz + ùëñzÃÑ
        end
    end

    # ITERATE OVER TIME
    for i in reverse(1:r)
        # COMPLETE THE PREVIOUS TIME-STEP AND START THE NEXT
        œà = Devices.propagate!(LocalandNonlocalDrive(tÃÑ[i+1]), device, OCCUPATION, -œÑ/2, œà)
        œà = Devices.propagate!(UNCOUPLED, device, OCCUPATION, -œÑ, œà)
        œà = Devices.propagate!(LocalandNonlocalDrive(tÃÑ[i]),   device, OCCUPATION, -œÑ/2, œà)
        for k in axes(OÃÑ,3)
            Œª = @view(ŒªÃÑ[:,k])
            Devices.propagate!(LocalandNonlocalDrive(tÃÑ[i+1]), device, OCCUPATION, -œÑ/2, Œª)
            Devices.propagate!(UNCOUPLED, device, OCCUPATION, -œÑ, Œª)
            Devices.propagate!(LocalandNonlocalDrive(tÃÑ[i]),   device, OCCUPATION, -œÑ/2, Œª)
        end

        # CALCULATE GRADIENT SIGNAL BRAKETS
        callback !== nothing && callback(i, tÃÑ[i], œà)
        for k in axes(OÃÑ,3)
            Œª = @view(ŒªÃÑ[:,k])
            for j in 1:Devices.ngrades(device)
                z = Devices.braket(Gradient(j, tÃÑ[i]), device, OCCUPATION, Œª, œà)
                result[i,j,k] = 2 * imag(z) # œïÃÑ[i,j,k] = -ùëñz + ùëñzÃÑ
            end
        end
    end

    return result
end